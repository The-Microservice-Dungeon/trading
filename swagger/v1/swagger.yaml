openapi: 3.0.1
info:
  title: Trading API
  description: REST Endpoints for the Trading service
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 2.0.0
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:8083
tags:
- name: buying
  description: Buying Items, Upgrades and Robots
- name: selling
  description: Selling Ressources
- name: balances
  description: Players Account Balances
- name: commands
  description: Commands Endpoint for Game Service
paths:
  /items/{item-name}:
    get:
      tags:
      - buying
      summary: Information about one specific Item
      parameters:
      - name: item-name
        in: path
        description: Name of Item to buy
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        404:
          description: Item not found
        500:
          description: Internal Server Error
        503:
          description: Service not Initialized
          content: {}
  /items:
    get:
      tags:
      - buying
      summary: Information about all avaliable Items
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {}
  /items/{item-name}/economy:
    patch:
      tags:
      - service routes
      summary:  Patch the current item economy
      parameters:
      - name: item-name
        in: path
        description: Name of Item 
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/ItemEconomy'
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {} 
    get:
      tags:
      - service routes
      summary:  Get the current item economy
      parameters:
      - name: item-name
        in: path
        description: Name of Item 
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/ItemEconomy'
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {}
  /resources/{resource-name}/economy:
    patch:
      tags:
      - service routes
      summary:  Patch the current resource economy
      parameters:
      - name: resource-name
        in: path
        description: Name of resource 
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/ResourceEconomy'
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {} 
    get:
      tags:
      - service routes
      summary:  Get the current resource economy
      parameters:
      - name: resource-name
        in: path
        description: Name of resource 
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/ResourceEconomy'
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {}
  /ressources:
    get:
      tags:
      - selling
      summary: Current Ressource Prices
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ressource'
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {}
      x-codegen-request-body-name: robot
  /balances:
    get:
      tags:
      - balances
      summary: Get all Players Account Balances
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Balance'
        403:
          description: Forbidden
          content: {}
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {}
  /commands:
    post:
      summary: Post a command to be executed
      description: "
        <h2>Command Types:</h2>
        <b>Buy</b> Buy a Upgrade/Item/Robot based on its <a href='https://the-microservice-dungeon.github.io/decisionlog/decisions/standardized-resource-names.html' target='_blank'>Name</a> <br>
        
        <b>Sell</b> Sell all of the Robot's Ressources
        "
      tags:
      - commands
      requestBody:
        description: Information about the Robot, that sends the Command
        content:
          application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Commands'
        required: true
      responses:
        200:
          description: Command successful
          content: {}
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                type: string
                enum:
                - Invalid Robot Position
                - Not enough Money
                - Inventory full
                - Invalid Upgrade
                - Other error
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {}
components:
  schemas:
    ResourceEconomy:
      type: object
      properties:
        demand:
          type: number
          description: Demand of the item
          example: 5
        roundCount:
          description: Current round number
          type: integer
          format: int32
          example: 12
        resourceName:
          type: string
          description: Name of the resource
          example: COAL  
    ItemEconomy:
      type: object
      properties:
        stock:
          type: number
          description: Stock of the item
          example: 5
        roundCount:
          description: Current round number
          type: integer
          format: int32
          example: 12
        itemName:
          type: string
          description: Name of the Item
          example: ROCKET
    Item:
      type: object
      properties:
        itemName:
          type: string
          description: Name of the Item
          example: ROCKET
        price:
          description: Current Price of the Item
          type: integer
          format: int32
          example: 200
        type:
          type: string
          example: item
          enum:
          - item
          - robot
          - upgrade
          - heath
          - energy
    Ressource:
      type: object
      properties:
        id:
          type: string
          description: ID of the Ressource
          format: uuid
        name:
          type: string
          description: Name of the Ressource
          example: Gold
        price:
          description: Current Price of the Item per Unit
          type: integer
          format: int32
          example: 200
    Balance:
      required:
      - player-id
      - balance
      properties:
        player-id:
          type: string
          description: ID of the Player
          format: uuid
        balance:
          description: The Players Account Balance
          type: integer
          format: int32
          example: 30002
    Commands:
      required:
      - transactionId
      - playerId
      - payload
      type: object
      properties:
        transactionId:
          type: string
          format: uuid
        playerId:
          type: string
          format: uuid
        payload:
          example: 
              commandType: "buy"
              robotId: UUID
              planetId: UUID
              itemName: "MINING_4"