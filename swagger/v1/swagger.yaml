openapi: 3.0.1
info:
  title: Trading API
  description: REST Endpoints for the Trading service
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 4.2.0.69
servers:
  - url: http://{defaultHost}
    variables:
      defaultHost:
        default: localhost:8083
tags:
  - name: balances
    description: Players Account Balances
  - name: commands
    description: Commands Endpoint for Game Service
  - name: service routes
    description: Admin routes to change various things in the service
paths:
  /resources/history/price:
    get:
      tags:
        - service routes
      summary: Get the complete price history of all resources
      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                    [
                    	{
                    		"name": "coal",
                    		"history": {
                    			"0": 42,
                    			"1": 69,
                    			"n": "...",
                    		}
                    	},
                    	...
                    ]
              schema:
                $ref: "#/components/schemas/ResourcePriceHistory"
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {}
  /resources/history/sell:
    get:
      tags:
        - service routes
      summary: Get the complete selling history of all resources
      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                      [
                      	{
                      		"name": "coal",
                      		"history": {
                      			"9": 420,
                      			"10": 1337,
                      			"n": "...",
                      		}
                      	},
                      	...
                      ]
              schema:
                $ref: "#/components/schemas/ResourceSellHistory"
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {}  
  /items/history/price:
    get:
      tags:
        - service routes
      summary: Get the complete price history of all items
      description: Only for special items. Upgrades etc. have no dynamic pricing
      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                    [
                    	{
                    		"name": "rocket",
                    		"history": {
                    			"0": 13,
                    			"1": 37,
                    			"n": "...",
                    		}
                    	},
                    	...
                    ]
              schema:
                $ref: "#/components/schemas/ItemPriceHistory"
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {}
  /items/history/buy:
    get:
      tags:
        - service routes
      summary: Get the complete buying history of all items
      description: Only for special items. Upgrades etc. have no dynamic pricing
      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                      [
                      	{
                      		"name": "rocket",
                      		"history": {
                      			"9": 2,
                      			"10": 1,
                      			"n": "...",
                      		}
                      	},
                      	...
                      ]
              schema:
                $ref: "#/components/schemas/ItemBuyHistory"
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {}  
  /balances:
    get:
      tags:
        - balances
      summary: Get all players account balances
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AllBalances"
        403:
          description: Forbidden
          content: {}
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {}
  /balances/{round-number}:
    get:
      tags:
        - balances
      summary: Get specific round account balances
      parameters:
        - name: round-number
          in: path
          description: Number of the round
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RoundBalance"
        403:
          description: Forbidden
          content: {}
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {}
  /commands:
    post:
      summary: Post a command to be executed
      description: "
        <h2>Command Types:</h2>
        <b>Buy</b> Buy a Upgrade/Item/Robot based on its <a href='https://the-microservice-dungeon.github.io/decisionlog/decisions/standardized-resource-names.html' target='_blank'>Name</a> <br>

        <b>Sell</b> Sell all of the Robot's Ressources
        "
      tags:
        - commands
      requestBody:
        description: Information about the Robot, that sends the Command
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Commands"
            examples:
              buyRobots:
                value:
                  [
                    {
                      "transactionId": "transactionId",
                      "playerId": "playerId",
                      "payload":
                        {
                          "commandType": "buy",
                          "amount": "5",
                          "itemName": "ROBOT",
                        },
                    },
                  ]
              buyUpgrade:
                value:
                  [
                    {
                      "transactionId": "transactionId",
                      "playerId": "playerId",
                      "payload":
                        {
                          "commandType": "buy",
                          "planetId": "planetId",
                          "robotId": "robotId",
                          "itemName": "MINING_4",
                        },
                    },
                  ]
              buyItem:
                value:
                  [
                    {
                      "transactionId": "transactionId",
                      "playerId": "playerId",
                      "payload":
                        {
                          "commandType": "buy",
                          "planetId": "planetId",
                          "robotId": "robotId",
                          "itemName": "NUKE",
                        },
                    },
                  ]
              sellResources:
                value:
                  [
                    {
                      "transactionId": "transactionId",
                      "playerId": "playerId",
                      "payload":
                        {
                          "commandType": "sell",
                          "planetId": "planetId",
                          "robotId": "robotId",
                        },
                    },
                  ]
        required: true
      responses:
        200:
          description: Command successful
          content: {}
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                type: string
                enum:
                  - Invalid Robot Position
                  - Not enough Money
                  - Inventory full
                  - Invalid Upgrade
                  - Other error
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {}
  /actuator/logs:
    get:
      tags:
        - logs
      summary: get logs
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Logs"
        403:
          description: Forbidden
          content: {}
        500:
          description: Internal Server Error
          content: {}
        503:
          description: Service not Initialized
          content: {}
components:
  schemas:
    ResourcePriceHistory:
      type: object
      properties:
          name:
            type: string
            description: Name of the resource
            example: "coal"
          history:
            description: A hashmap with round number as a key and the price as the value.
            type: object
            additionalProperties:
              type: string
            example:
              "0": 25
              "1": 25
    ResourceSellHistory:
      type: object
      properties:
          name:
            type: string
            description: Name of the resource
            example: "coal"
          history:
            description: A hashmap with round number as a key and the amountSold as the value.
            type: object
            additionalProperties:
              type: string
            example:
              "9": 2
              "10": 1        
    ItemPriceHistory:
      type: object
      properties:
        name:
          type: string
          description: Name of the item
          example: "rocket"
        history:
          description: A hashmap with round number as a key and the price as the value.
          type: object
          additionalProperties:
            type: string
          example:
            "0": 25
            "1": 25
    ItemBuyHistory:
      type: object
      properties:
        name:
          type: string
          description: Name of the item
          example: "rocket"
        history:
          description: A hashmap with round number as a key and the amountBought as the value.
          type: object
          additionalProperties:
            type: string
          example:
            "9": 2
            "10": 1            
    Item:
      type: object
      properties:
        itemName:
          type: string
          description: Name of the Item
          example: ROCKET
        price:
          description: Current Price of the Item
          type: integer
          format: int32
          example: 200
        type:
          type: string
          example: item
          enum:
            - item
            - robot
            - upgrade
            - heath
            - energy
    Ressource:
      type: object
      properties:
        id:
          type: string
          description: ID of the Ressource
          format: uuid
        name:
          type: string
          description: Name of the Ressource
          example: Gold
        price:
          description: Current Price of the Item per Unit
          type: integer
          format: int32
          example: 200
    AllBalances:
      required:
        - playerId
        - balance
      properties:
        playerId:
          type: string
          description: ID of the Player
          format: uuid
        balance:
          description: The Players Account Balance
          type: integer
          format: int32
          example: 30002
    RoundBalance:
      required:
        - playerId
        - balance
      properties:
        round:
          type: integer
          description: Number of the round
          format: int32
        playerId:
          type: string
          description: ID of the Player
          format: uuid
        balance:
          description: The Players Account Balance
          type: integer
          format: int32
          example: 30002
    Commands:
      required:
        - transactionId
        - playerId
        - payload
      type: object
      properties:
        transactionId:
          type: string
          format: uuid
        playerId:
          type: string
          format: uuid
        payload:
          example:
            commandType: "buy"
            robotId: UUID
            planetId: UUID
            itemName: "MINING_4"
    Logs:
      type: string
      description: the log string
      format: logs
